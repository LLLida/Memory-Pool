#+AUTHOR: Adil Mokhammad
#+EMAIL: 0adilmohammad0@gmail.com

* C++ header only memory pool library

- Small. 1 header file with 2 classes for usage: =lida::LocalMemoryPool= and =lida::GlobalMemoryPool=.
- STL compatible. It ideally works with =std::list=, =std::set= and =std::map=.
- Fast. You can even make it faster by preallocating memory with =reverse()=.

* Installation

  Add the repository as subdirectory in your project and 'link' the library to properly get includes:
#+BEGIN_SRC cmake
  add_subdirectory(Memory-Pool)
  target_link_libraries(YOUR_TARGET_NAME PRIVATE lida::Memory-Pool)
#+END_SRC

* Usage

In fact =lida::LocalMemoryPool= and =lida::GlobalMemoryPool= are just STL compatible allocators.
Example:
#+BEGIN_SRC cpp
#include <algorithm>
#include <iostream>
#include <list>
#include <lida/MemoryPool.hpp>

int main()
{
    // Create a list containing integers
    std::list<int, lida::LocalMemoryPool<int>> l = { 7, 5, 16, 8 };
    // Add an integer to the front of the list
    l.push_front(25);
    // Add an integer to the back of the list
    l.push_back(13);
    // Insert an integer before 16 by searching
    auto it = std::find(l.begin(), l.end(), 16);
    if (it != l.end()) {
        l.insert(it, 42);
    }
    // Print out the list
    std::cout << "l = { ";
    for (int n : l) {
        std::cout << n << ", ";
    }
    std::cout << "};\n";
}
#+END_SRC
=lida::LocalMemoryPool= is regular allocator like =std::allocator= but a bit faster. Each object of this class allocates own memory and manages it.
=lida::GlobalMemoryPool= is different. It allocates memory for the whole class, each object share the same storage.
This can lead to better performance(less allocations).

* Limitation

  The memory pool can only allocate objects by one. It can not be used with containers like =std::vector= which allocate objects many at once. 
  
